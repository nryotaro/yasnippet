# -*- mode: snippet -*-
# name: segtree
# key: segtree
# --
template <typename S> class SegTree {
public:
  SegTree(int size, function<S(S, S)> op, S e) : op(op), e(e) {
    int n_nodes = 1;
    while (n_nodes < size)
      n_nodes *= 2;
    tree.resize(n_nodes * 2 - 1, e);
  }

  void set(int i, S v) {
    int node = tree.size() / 2 + i;
    tree[node] = v;
    while (node > 0) {
      node = (node - 1) / 2;
      tree[node] = op(tree[node * 2 + 1], tree[node * 2 + 2]);
    }
  }

  S get(int i) { return prod(i, i + 1); }

  S prod(int left, int right) {
    return prod(left, right, 0, 0, (tree.size() + 1) / 2);
  }

private:
  function<S(S, S)> op;
  vector<S> tree;
  S e;

  S prod(int left, int right, int node, int leaf_l, int leaf_r) {
    if (leaf_r <= left || right <= leaf_l)
      return e;
    if (left <= leaf_l && leaf_r <= right)
      return tree[node];
    int mid = (leaf_l + leaf_r) / 2;
    S l = prod(left, right, node * 2 + 1, leaf_l, mid);
    S r = prod(left, right, node * 2 + 2, mid, leaf_r);
    return op(l, r);
  }
};
