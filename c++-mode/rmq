# -*- mode: snippet -*-
# name: rmq
# key: rmq
# --
template <typename T> class RMQ {
public:
  RMQ(int size, T inf_) {
    int n_leaves = 1;
    while (n_leaves < size)
      n_leaves *= 2;
    inf = inf_;
    tree.resize(n_leaves * 2 - 1, inf);
  }

  void update(int k, T a) {
    int node = leftmost_leaf() + k;
    tree[node] = a;
    while (node > 0) {
      node = (node - 1) / 2;
      tree[node] = min(tree[node * 2 + 1], tree[node * 2 + 2]);
    }
  }

  T query(int from, int to) { return query(from, to, 0, 0, n_leaves()); }

private:
  vector<T> tree;
  T inf;
  int leftmost_leaf() { return (tree.size() + 1) / 2 - 1; }
  int n_leaves() { return (tree.size() + 1) / 2; }

  T query(int from, int to, int root, int left, int right) {
    if (right <= from || to <= left)
      return inf;
    if (from <= left && right <= to)
      return tree[root];
    T left_v = query(from, to, root * 2 + 1, left, (left + right) / 2);
    T right_v = query(from, to, root * 2 + 2, (left + right) / 2, right);
    return min(left_v, right_v);
  }
};